/**
 *
 *  Products.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Products.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Products::primaryKeyName = "";
const bool Products::hasPrimaryKey = false;
const std::string Products::tableName = "\"products\"";

const std::vector<typename Products::MetaData> Products::metaData_={
};
const std::string &Products::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Products::Products(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 0 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
    }

}

Products::Products(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 0)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
}

Products::Products(const Json::Value &pJson) noexcept(false)
{
}

void Products::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 0)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
}

void Products::updateByJson(const Json::Value &pJson) noexcept(false)
{
}

void Products::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Products::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
    };
    return inCols;
}

void Products::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
}

const std::vector<std::string> Products::updateColumns() const
{
    std::vector<std::string> ret;
    return ret;
}

void Products::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
}
Json::Value Products::toJson() const
{
    Json::Value ret;
    return ret;
}

std::string Products::toString() const
{
    return toJson().toStyledString();
}

Json::Value Products::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 0)
    {
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    return ret;
}

bool Products::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    return true;
}
bool Products::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 0)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Products::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    return true;
}
bool Products::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 0)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Products::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
