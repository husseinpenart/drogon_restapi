/**
 *
 *  Productstable.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Productstable.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Productstable::Cols::_id = "\"id\"";
const std::string Productstable::Cols::_title = "\"title\"";
const std::string Productstable::Cols::_category = "\"category\"";
const std::string Productstable::Cols::_image = "\"image\"";
const std::string Productstable::Cols::_price = "\"price\"";
const std::string Productstable::Cols::_colors = "\"colors\"";
const std::string Productstable::primaryKeyName = "id";
const bool Productstable::hasPrimaryKey = true;
const std::string Productstable::tableName = "\"productstable\"";

const std::vector<typename Productstable::MetaData> Productstable::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"title","std::string","character varying",255,0,0,1},
{"category","std::string","character varying",100,0,0,1},
{"image","std::string","character varying",100,0,0,1},
{"price","int32_t","integer",4,0,0,0},
{"colors","std::string","character varying",50,0,0,0}
};
const std::string &Productstable::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Productstable::Productstable(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["category"].isNull())
        {
            category_=std::make_shared<std::string>(r["category"].as<std::string>());
        }
        if(!r["image"].isNull())
        {
            image_=std::make_shared<std::string>(r["image"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<int32_t>(r["price"].as<int32_t>());
        }
        if(!r["colors"].isNull())
        {
            colors_=std::make_shared<std::string>(r["colors"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            category_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            image_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            price_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            colors_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Productstable::Productstable(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            category_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            colors_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

Productstable::Productstable(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("category"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["category"].isNull())
        {
            category_=std::make_shared<std::string>(pJson["category"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
    if(pJson.isMember("colors"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["colors"].isNull())
        {
            colors_=std::make_shared<std::string>(pJson["colors"].asString());
        }
    }
}

void Productstable::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            category_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            colors_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void Productstable::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("category"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["category"].isNull())
        {
            category_=std::make_shared<std::string>(pJson["category"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
    if(pJson.isMember("colors"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["colors"].isNull())
        {
            colors_=std::make_shared<std::string>(pJson["colors"].asString());
        }
    }
}

const int32_t &Productstable::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Productstable::getId() const noexcept
{
    return id_;
}
void Productstable::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Productstable::PrimaryKeyType & Productstable::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Productstable::getValueOfTitle() const noexcept
{
    static const std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productstable::getTitle() const noexcept
{
    return title_;
}
void Productstable::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void Productstable::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}

const std::string &Productstable::getValueOfCategory() const noexcept
{
    static const std::string defaultValue = std::string();
    if(category_)
        return *category_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productstable::getCategory() const noexcept
{
    return category_;
}
void Productstable::setCategory(const std::string &pCategory) noexcept
{
    category_ = std::make_shared<std::string>(pCategory);
    dirtyFlag_[2] = true;
}
void Productstable::setCategory(std::string &&pCategory) noexcept
{
    category_ = std::make_shared<std::string>(std::move(pCategory));
    dirtyFlag_[2] = true;
}

const std::string &Productstable::getValueOfImage() const noexcept
{
    static const std::string defaultValue = std::string();
    if(image_)
        return *image_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productstable::getImage() const noexcept
{
    return image_;
}
void Productstable::setImage(const std::string &pImage) noexcept
{
    image_ = std::make_shared<std::string>(pImage);
    dirtyFlag_[3] = true;
}
void Productstable::setImage(std::string &&pImage) noexcept
{
    image_ = std::make_shared<std::string>(std::move(pImage));
    dirtyFlag_[3] = true;
}

const int32_t &Productstable::getValueOfPrice() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Productstable::getPrice() const noexcept
{
    return price_;
}
void Productstable::setPrice(const int32_t &pPrice) noexcept
{
    price_ = std::make_shared<int32_t>(pPrice);
    dirtyFlag_[4] = true;
}
void Productstable::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Productstable::getValueOfColors() const noexcept
{
    static const std::string defaultValue = std::string();
    if(colors_)
        return *colors_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productstable::getColors() const noexcept
{
    return colors_;
}
void Productstable::setColors(const std::string &pColors) noexcept
{
    colors_ = std::make_shared<std::string>(pColors);
    dirtyFlag_[5] = true;
}
void Productstable::setColors(std::string &&pColors) noexcept
{
    colors_ = std::make_shared<std::string>(std::move(pColors));
    dirtyFlag_[5] = true;
}
void Productstable::setColorsToNull() noexcept
{
    colors_.reset();
    dirtyFlag_[5] = true;
}

void Productstable::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Productstable::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "title",
        "category",
        "image",
        "price",
        "colors"
    };
    return inCols;
}

void Productstable::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getColors())
        {
            binder << getValueOfColors();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Productstable::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Productstable::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getColors())
        {
            binder << getValueOfColors();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Productstable::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getCategory())
    {
        ret["category"]=getValueOfCategory();
    }
    else
    {
        ret["category"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getColors())
    {
        ret["colors"]=getValueOfColors();
    }
    else
    {
        ret["colors"]=Json::Value();
    }
    return ret;
}

std::string Productstable::toString() const
{
    return toJson().toStyledString();
}

Json::Value Productstable::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCategory())
            {
                ret[pMasqueradingVector[2]]=getValueOfCategory();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getImage())
            {
                ret[pMasqueradingVector[3]]=getValueOfImage();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[4]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getColors())
            {
                ret[pMasqueradingVector[5]]=getValueOfColors();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getCategory())
    {
        ret["category"]=getValueOfCategory();
    }
    else
    {
        ret["category"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getColors())
    {
        ret["colors"]=getValueOfColors();
    }
    else
    {
        ret["colors"]=Json::Value();
    }
    return ret;
}

bool Productstable::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("category"))
    {
        if(!validJsonOfField(2, "category", pJson["category"], err, true))
            return false;
    }
    else
    {
        err="The category column cannot be null";
        return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(3, "image", pJson["image"], err, true))
            return false;
    }
    else
    {
        err="The image column cannot be null";
        return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(4, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("colors"))
    {
        if(!validJsonOfField(5, "colors", pJson["colors"], err, true))
            return false;
    }
    return true;
}
bool Productstable::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Productstable::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("category"))
    {
        if(!validJsonOfField(2, "category", pJson["category"], err, false))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(3, "image", pJson["image"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(4, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("colors"))
    {
        if(!validJsonOfField(5, "colors", pJson["colors"], err, false))
            return false;
    }
    return true;
}
bool Productstable::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Productstable::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
