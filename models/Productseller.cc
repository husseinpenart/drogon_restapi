/**
 *
 *  Productseller.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Productseller.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Productseller::Cols::_id = "\"id\"";
const std::string Productseller::Cols::_name = "\"name\"";
const std::string Productseller::Cols::_profile = "\"profile\"";
const std::string Productseller::Cols::_mobile = "\"mobile\"";
const std::string Productseller::Cols::_products = "\"products\"";
const std::string Productseller::primaryKeyName = "id";
const bool Productseller::hasPrimaryKey = true;
const std::string Productseller::tableName = "\"productseller\"";

const std::vector<typename Productseller::MetaData> Productseller::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",100,0,0,0},
{"profile","std::string","character varying",100,0,0,0},
{"mobile","std::string","character varying",13,0,0,0},
{"products","std::string","character varying",20,0,0,0}
};
const std::string &Productseller::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Productseller::Productseller(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(r["profile"].as<std::string>());
        }
        if(!r["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(r["mobile"].as<std::string>());
        }
        if(!r["products"].isNull())
        {
            products_=std::make_shared<std::string>(r["products"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            profile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            mobile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            products_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Productseller::Productseller(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            profile_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            products_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

Productseller::Productseller(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("profile"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(pJson["profile"].asString());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("products"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["products"].isNull())
        {
            products_=std::make_shared<std::string>(pJson["products"].asString());
        }
    }
}

void Productseller::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            profile_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            products_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void Productseller::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("profile"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(pJson["profile"].asString());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("products"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["products"].isNull())
        {
            products_=std::make_shared<std::string>(pJson["products"].asString());
        }
    }
}

const int32_t &Productseller::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Productseller::getId() const noexcept
{
    return id_;
}
void Productseller::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Productseller::PrimaryKeyType & Productseller::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Productseller::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productseller::getName() const noexcept
{
    return name_;
}
void Productseller::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Productseller::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void Productseller::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Productseller::getValueOfProfile() const noexcept
{
    static const std::string defaultValue = std::string();
    if(profile_)
        return *profile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productseller::getProfile() const noexcept
{
    return profile_;
}
void Productseller::setProfile(const std::string &pProfile) noexcept
{
    profile_ = std::make_shared<std::string>(pProfile);
    dirtyFlag_[2] = true;
}
void Productseller::setProfile(std::string &&pProfile) noexcept
{
    profile_ = std::make_shared<std::string>(std::move(pProfile));
    dirtyFlag_[2] = true;
}
void Productseller::setProfileToNull() noexcept
{
    profile_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Productseller::getValueOfMobile() const noexcept
{
    static const std::string defaultValue = std::string();
    if(mobile_)
        return *mobile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productseller::getMobile() const noexcept
{
    return mobile_;
}
void Productseller::setMobile(const std::string &pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(pMobile);
    dirtyFlag_[3] = true;
}
void Productseller::setMobile(std::string &&pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(std::move(pMobile));
    dirtyFlag_[3] = true;
}
void Productseller::setMobileToNull() noexcept
{
    mobile_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Productseller::getValueOfProducts() const noexcept
{
    static const std::string defaultValue = std::string();
    if(products_)
        return *products_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Productseller::getProducts() const noexcept
{
    return products_;
}
void Productseller::setProducts(const std::string &pProducts) noexcept
{
    products_ = std::make_shared<std::string>(pProducts);
    dirtyFlag_[4] = true;
}
void Productseller::setProducts(std::string &&pProducts) noexcept
{
    products_ = std::make_shared<std::string>(std::move(pProducts));
    dirtyFlag_[4] = true;
}
void Productseller::setProductsToNull() noexcept
{
    products_.reset();
    dirtyFlag_[4] = true;
}

void Productseller::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Productseller::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "profile",
        "mobile",
        "products"
    };
    return inCols;
}

void Productseller::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProfile())
        {
            binder << getValueOfProfile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getProducts())
        {
            binder << getValueOfProducts();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Productseller::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Productseller::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProfile())
        {
            binder << getValueOfProfile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getProducts())
        {
            binder << getValueOfProducts();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Productseller::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getProfile())
    {
        ret["profile"]=getValueOfProfile();
    }
    else
    {
        ret["profile"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getProducts())
    {
        ret["products"]=getValueOfProducts();
    }
    else
    {
        ret["products"]=Json::Value();
    }
    return ret;
}

std::string Productseller::toString() const
{
    return toJson().toStyledString();
}

Json::Value Productseller::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getProfile())
            {
                ret[pMasqueradingVector[2]]=getValueOfProfile();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMobile())
            {
                ret[pMasqueradingVector[3]]=getValueOfMobile();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getProducts())
            {
                ret[pMasqueradingVector[4]]=getValueOfProducts();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getProfile())
    {
        ret["profile"]=getValueOfProfile();
    }
    else
    {
        ret["profile"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getProducts())
    {
        ret["products"]=getValueOfProducts();
    }
    else
    {
        ret["products"]=Json::Value();
    }
    return ret;
}

bool Productseller::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("profile"))
    {
        if(!validJsonOfField(2, "profile", pJson["profile"], err, true))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(3, "mobile", pJson["mobile"], err, true))
            return false;
    }
    if(pJson.isMember("products"))
    {
        if(!validJsonOfField(4, "products", pJson["products"], err, true))
            return false;
    }
    return true;
}
bool Productseller::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Productseller::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("profile"))
    {
        if(!validJsonOfField(2, "profile", pJson["profile"], err, false))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(3, "mobile", pJson["mobile"], err, false))
            return false;
    }
    if(pJson.isMember("products"))
    {
        if(!validJsonOfField(4, "products", pJson["products"], err, false))
            return false;
    }
    return true;
}
bool Productseller::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Productseller::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 13)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 13)";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>{}
                .from_bytes(pJson.asCString()).size() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
